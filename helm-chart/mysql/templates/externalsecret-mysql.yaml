apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  # Sync only the app password needed for chart install
  name: mysql-app-password-eso-sync
  # Deploy in the same namespace as MySQL (data)
  namespace: {{ .Release.Namespace }}
  labels:
    # Add labels consistent with the MySQL chart if needed
    app: mysql
  annotations:
    # Using annotation to document the actual AWS secret name for debugging purposes
    aws-secret: "eks-blizzard/mysql-app-user-1btvf2"
spec:
  refreshInterval: "1h" # How often to check for updates in AWS Secrets Manager
  secretStoreRef:
    # Reference the ClusterSecretStore created by Terraform
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    # Target the new secret specifically for the app password
    name: mysql-app-user-password-secret
    # Policy for creating the K8s Secret if it doesn't exist
    creationPolicy: Owner
    # Template allows adding labels/annotations to the created K8s Secret
    template:
      metadata:
        labels:
          # Label for potential NetworkPolicy targeting
          app: mysql
          role: mysql-app-password # Label indicating its purpose
      data:
        # Extract just the password field from the matched secret
        # This template takes the password field from the matched secret
        mysql-password: "{{ index .password }}"
  # Use dataFrom with find to locate the secret by pattern matching
  dataFrom:
    - find:
        path: {{ .Values.secrets.path | default "" }}
        tags:
          status: active
        name:
          regexp: "^{{ .Values.secrets.awsSecretPrefix }}.*$"

    # Sync Root Password
    # - secretKey: mysql-root-password # Key name for root password in K8s Secret
    #   remoteRef:
    #     key: eks-blizzard/mysql-root # Source: Root password AWS secret
    #     property: root_password

    # Sync App Username
    # - secretKey: mysql-user # Key name for app username in K8s Secret
    #   remoteRef:
    #     key: eks-blizzard/mysql-app-user # Source: App user AWS secret
    #     property: username

    # Sync App Database Name
    # - secretKey: mysql-database # Key name for database name in K8s Secret
    #   remoteRef:
    #     key: eks-blizzard/mysql-app-user # Source: App user AWS secret
    #     property: database

    # Map 'username' key from AWS SM secret 'eks-blizzard/mysql' to 'mysql-user' key in K8s secret
    # - secretKey: mysql-user
    #   remoteRef:
    #     key: eks-blizzard/mysql # Name of the secret in AWS Secrets Manager
    #     property: username      # Key within the AWS Secret JSON

    # # Map 'password' key from AWS SM secret 'eks-blizzard/mysql' to 'mysql-password' key in K8s secret
    # - secretKey: mysql-password
    #   remoteRef:
    #     key: eks-blizzard/mysql
    #     property: password

    # The root password and database name are no longer synced via ESO for this secret
    # # Map 'root_password' key from AWS SM secret 'eks-blizzard/mysql' to 'mysql-root-password' key in K8s secret
    # - secretKey: mysql-root-password
    #   remoteRef:
    #     key: eks-blizzard/mysql
    #     property: root_password # Key within the AWS Secret JSON storing the root password
    #
    # # Map 'database' key from AWS SM secret 'eks-blizzard/mysql' to 'mysql-database' key in K8s secret
    # - secretKey: mysql-database
    #   remoteRef:
    #     key: eks-blizzard/mysql
    #     property: database 