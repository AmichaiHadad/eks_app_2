apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            # Mount weather API key from app-secrets
            - name: WEATHER_API_KEY
              valueFrom:
                secretKeyRef:
                  # This secret should still be created separately for the weather key if needed
                  # Ensure an ExternalSecret exists for this in app/templates if it's managed via ESO
                  name: app-secrets
                  key: weather-api-key
            # Mount DB credentials from the secret managed by the MySQL chart
            - name: DB_HOST
              value: "mysql.data.svc.cluster.local" # Use internal service name
            - name: DB_PORT
              value: "3306"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-chart-credentials # Use the secret created in the 'data' namespace
                  key: mysql-user # Key for the app user (needs to be synced by MySQL chart's ESO)
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-chart-credentials # Use the secret created in the 'data' namespace
                  key: mysql-password # Key for the app password (synced by MySQL chart's ESO)
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mysql-chart-credentials # Use the secret created in the 'data' namespace
                  key: mysql-database # Key for the database name (synced by MySQL chart's ESO)
            # Downward API for pod name (container ID)
            - name: CONTAINER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}