# This template creates ExternalSecret resources to sync secrets from AWS Secrets Manager
# using the External Secrets Operator.

# Create ExternalSecret for Weather API Key
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-weather-api-external-secret
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    name: app-secrets
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app: {{ include "app.name" . }}
      data:
        # Extract API key from the matched secret
        weather-api-key: "{{ .api_key }}"
  # Use dataFrom with find to locate the secret by pattern matching
  dataFrom:
    - extract:
        key: ""
        find:
          name:
            regexp: "^{{ .Values.secrets.weatherAPIPrefix | default "eks-blizzard/weather-api" }}.*$"
          tags:
            status: active
---
# Create ExternalSecret for MySQL App User connection details
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-mysql-connection-eso-sync
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    name: mysql-app-creds
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app: {{ include "app.name" . }}
          role: mysql-app-credentials
  # Use dataFrom with find to locate and extract all fields from the matched secret
  dataFrom:
    - extract:
        key: ""
        find:
          name:
            regexp: "^{{ .Values.secrets.mysqlAppUserPrefix | default "eks-blizzard/mysql-app-user" }}.*$"
          tags:
            status: active 