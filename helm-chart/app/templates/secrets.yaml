# This template creates ExternalSecret resources to sync secrets from AWS Secrets Manager
# using the External Secrets Operator.

# Create ExternalSecret for Weather API Key
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-weather-api-external-secret
  namespace: {{ .Release.Namespace }} # Deploy in the application's namespace
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    # Target the k8s secret name the deployment expects for the weather key
    name: app-secrets
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app: {{ include "app.name" . }}
  data:
  - secretKey: weather-api-key # The key within the Kubernetes Secret
    remoteRef:
      # Use fixed secret prefix
      key: eks-blizzard/weather-api
      property: api_key # The key within the AWS Secret JSON
---
# Create ExternalSecret for MySQL App User connection details
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-mysql-connection-eso-sync # New name for clarity
  namespace: {{ .Release.Namespace }} # Deploy in the application's namespace
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: aws-secretsmanager
    kind: ClusterSecretStore
  target:
    # Create the dedicated secret for app DB connection details
    name: mysql-app-creds
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app: {{ include "app.name" . }}
          role: mysql-app-credentials # Specific label
  # Sync all relevant fields for the app connection from the app user secret
  dataFrom:
  - extract:
      key: eks-blizzard/mysql-app-user # Use the app-user-specific AWS secret 